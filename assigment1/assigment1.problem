% Metamodel

% Inventory can contain Equipment (types of Equipment are Weapon, Armour and Potion).
class Inventory{
    contains Weapon[1..2] weapons;
    contains Potion[] potions;
    contains Armour[] armours;
}

class Hero {
    string name;
    int level;
    contains Race[1] race;
    contains Role[1] role;
    contains Skill[1..2] skills; %Every hero has Skills (At least one - 1..*)
    contains Inventory [1] inventory; %A hero has an inventory. (At least one - 1..*)
    contains Attribute[1..3] attributes; %Can have Attributes
}
scope Hero = 1.

decision rule setLevel100(Hero h) ==> level(h): 100.
decision rule setLevel50(Hero h) ==> level(h): 50.
concretization rule setLevel(Hero h) <-> !isConcrete(level(h)) 
    ==> level(h): 70.

abstract class Race {
    string raceType;
}
class Human extends Race.
raceType(Human::new): "Human".
class Elf extends Race.
raceType(Elf::new): "Elf".
class Orc extends Race.
raceType(Orc::new): "Orc".
class Dwarf extends Race.
raceType(Dwarf::new): "Dwarf".

abstract class Role {
    string roleType;
}
class Wizard extends Role.
roleType(Wizard::new): "Wizard".
class Archer extends Role.
roleType(Archer::new): "Archer".
class Thief extends Role.
roleType(Thief::new): "Thief".
class Knight extends Role.
roleType(Knight::new): "Knight".


abstract class Attribute {
    string attributeName; % This helps to differentiate the subclasses in constraints
    int attributeValue;
}
class Strength extends Attribute.
attributeName(Strength::new): "Strength". % Set to this string for every instance of the class

class Intelligence extends Attribute.
attributeName(Intelligence::new): "Intelligence". % Set to this string for every instance of the class

class Agility extends Attribute.
attributeName(Agility::new): "Agility". % Set to this string for every instance of the class

class Perception extends Attribute.
attributeName(Perception::new): "Perception". % Set to this string for every instance of the class

abstract class Skill{
    string skillName;
    int minHeroLevel;
    Attribute[1] requiredAttribute; %Can have Attributes
}

class Archery extends Skill.
skillName(Archery::new): "Archery". % Set to this string for every instance of the class

class Magic extends Skill.
skillName(Magic::new): "Magic". % Set to this string for every instance of the class

class Stealth extends Skill.
skillName(Stealth::new): "Stealth". % Set to this string for every instance of the class

abstract class Equipment{
    string equipmentName;
}

abstract class Weapon extends Equipment{
    int attackDamage;
}

abstract class Armour extends Equipment{
    int defendDamage;
}

abstract class Potion extends Equipment{
    int duration;
}

class Sword extends Weapon{
    string color;
}
equipmentName(Sword::new): "Sword".

class Bow extends Weapon{
    int numArrow;
}
equipmentName(Bow::new): "Bow".

class Axe extends Weapon.
equipmentName(Axe::new): "Axe".

class Staff extends Weapon{
    int magicLevel;
}
equipmentName(Staff::new): "Staff".

class HeavyArmour extends Armour.

class LightArmour extends Armour.

class GrowthPotion extends Potion.

class InvisibilityPotion extends Potion.

class ShapeShiftPotion extends Potion.

%We only have one Hero so all attributes are hero attributes

% == Constraints ==

%---------------------------------------------%
% Rule: At least one of the arrtibutes must be a value higher than one

% Set concrete values for attributes, to test only set values to zero -> should fail to create a model
decision rule setAttributeValue0(Attribute a) ==> attributeValue(a):0.
decision rule setAttributeValue10(Attribute a) ==> attributeValue(a):10.
decision rule setAttributeValue20(Attribute a) ==> attributeValue(a):20.
decision rule setAttributeValue30(Attribute a) ==> attributeValue(a):30.
decision rule setAttributeValue40(Attribute a) ==> attributeValue(a):40.
concretization rule setAttributeValue(Attribute a) <-> !isConcrete(attributeValue(a)) 
    ==> attributeValue(a): 50.

int sumOfAllAttributes() = sum {  Attribute(a) -> attributeValue(a)}.
error noZeroAttributes() <-> sumOfAllAttributes() == 0.
%---------------------------------------------%


%---------------------------------------------%
% Rule: The inventory cannot contain too much Equipment.
error EquipmentLimitHero(Hero h) <-> 
    inventory(h, i),
    (count {  weapons(i, _) } 
     + count {  potions(i, _) } 
     + count {  armours(i, _) })  > 5. %equipment limit Hero (error if inventory > 5 items)
%---------------------------------------------%

%---------------------------------------------%
% Rule: A Hero cannot have more than one type of Armour.
error noBothTypesOfArmours(Hero h) <->
    inventory(h,i),
    armours(i,aH), HeavyArmour(aH),
    armours(i,aL), LightArmour(aL).
%---------------------------------------------%

%---------------------------------------------%
% Rule: Only the Wizzard can wield a staff

% TEST 1 (Should fail): try to generate thief with staff
% error heroThief_TEST (Hero h) <->
%     role(h,r), roleType(r) != "Thief".
% error generateStaff () <-> !Staff(_s).

% TEST 2 (Should succeed): try to generate wizard with staff
% scope Wizard = 1.
% error generateStaff () <-> !Staff(_s).

error WizardOnlyStaff1(Hero h) <-> 
   !Wizard(_w), count {  Staff(_s) } != 0.
%---------------------------------------------%

%---------------------------------------------%
% Rule: Thief cannot have HeavyArmour

% TEST 1 (Should fail): try to generate thief with heavy armour
% error heroThief_TEST (Hero h) <->
%    role(h,r), roleType(r) != "Thief".
% error generateHeavyArmour() <-> !HeavyArmour(_a).

% TEST 2 (Should succeed): try to generate thief with ligt armour
% error heroThief_TEST (Hero h) <->
%     role(h,r), roleType(r) != "Thief".
% error generateLightArmour() <-> !LightArmour(_a).

error thiefNotWearHeavyArmour(Hero h) <-> 
    role(h, r),  roleType(r) == "Thief", 
    inventory(h,i), armours(i,aH), HeavyArmour(aH).
%---------------------------------------------%


%---------------------------------------------%
%Rule: A hero cannot have the same attribute/skill more than once

% Attributes
scope Strength = 0..1.
scope Intelligence = 0..1.
scope Agility = 0..1.
scope Perception = 0..1.

%Skills
scope Archery = 0..1.
scope Magic = 0..1.
scope Stealth = 0..1.

%---------------------------------------------%


%---------------------------------------------%
%Rule: minHeroLevel must be lower or equel than the hero level

decision rule setMinHeroLevel100(Skill h) ==> minHeroLevel(h): 80.
decision rule setMinHeroLevel50(Skill h) ==> minHeroLevel(h): 40.
concretization rule setMinHeroLevel(Skill h) <-> !isConcrete(minHeroLevel(h)) 
    ==> minHeroLevel(h): 60.

error heroSkillLevel(Hero h) <-> Skill(s), minHeroLevel(s) > level(h).
%---------------------------------------------%


%---------------------------------------------%
% Rule: A Wizard must have Magic.

% TEST 1 (Should succeed): Generate only wizard (chances are low, and thus often fails)
%error heroWizard () <-> !Wizard(_r).
%scope Wizard = 1. 

pred hasMagic(Hero h) <->
    skills(h, s), skillName(s) == "Magic".

error wizardMustHaveMagic(Hero h) <->
    role(h, r), Wizard(r), !hasMagic(h).
%---------------------------------------------%


%---------------------------------------------%
% Rule: A knight must have a strenght value higher than 10

% TEST 1 (Should succeed): always add a knight
%scope Knight = 1.

error KnightHasStrenght(Knight k) <->
    !Strength(_s).

error KnightToLowString(Knight k) <->
    Strength(s), attributeValue(s) < 10.
%---------------------------------------------%


%---------------------------------------------%
% Rule: Magic requires Intelligence.
pred hasIntelligence(Skill s) <->
    requiredAttribute(s, a), Intelligence(a).

error magicRequiresIntelligence(Skill s) <->
    Magic(s), !hasIntelligence(s).
%---------------------------------------------%


%---------------------------------------------%
% Rule: An Archer must have a Bow.

% TEST 1 (should succeed): Generate archer with bow
% error heroArcher (Hero h) <->
%    role(h,r), !Archer(r).
% error generateBow() <-> !Bow(_b).

% TEST 2 (should fail): generate archer without bow
% error heroArcher (Hero h) <->
%    role(h,r), !Archer(r).
% error generateBow() <-> Bow(_b).

%  An Archer must have a Bow.
pred hasBow(Hero h) <->
    inventory(h, i),
    weapons(i, b),
    Bow(b).

error archerMustHaveBow(Hero h) <->
    role(h, r), Archer(r), !hasBow(h).
%---------------------------------------------%


%---------------------------------------------%
% Rule: If a Hero has a Bow, he must have Archery.

% TEST 1 (should succeed):  To check if it's working well (only Heros with Bow)
% error heroNotHasABow(Hero h) <->
%    !hasBow(h).

pred hasArchery(Hero h) <->
    skills(h,s), Archery(s).

error hasBowhasArchery(Hero h) <->
    hasBow(h), !hasArchery(h).
%-------------------------------------


%---------------------------------------------%
% Rule:  A Dwarf cannot be a Wizard.
error dwarfCantBeWizard(Hero h) <->
    race(h, ra),  Dwarf(ra), 
    role(h, ro),  Wizard(ro).
%-------------------------------------


