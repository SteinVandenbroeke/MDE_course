% Metamodel
abstract class Character{
    contains Weapon[0..2] weapons;
    contains Potion[] potions;
    contains Armour[] armours;
}

class Hero extends Character {
    string name;
    int level;
    contains Race[1] race;
    contains Role[1] role
    contains Attribute[] attributes;
    contains Skill[2] skills;
}
scope Hero = 1.

decision rule setLevel100(Hero h) ==> level(h): 100.
decision rule setLevel50(Hero h) ==> level(h): 50.
concretization rule setLevel(Hero h) <-> !isConcrete(level(h)) 
    ==> level(h): 70.

abstract class Race extends Character.
class Human extends Race.
type(Human::new): "Human".
class Elf extends Race.
type(Elf::new): "Elf".
class Orc extends Race.
type(Orc::new): "Orc".
class Darf extends Race.
type(Darf::new): "Darf".

abstract class Role{
    string type
}
class Wizzard extends Role.
type(Wizzard::new): "Wizzard".
class Archer extends Role.
type(Archer::new): "Archer".
class Thief extends Role.
type(Thief::new): "Thief".
class Knight extends Role.
type(Knight::new): "Knight".


abstract class Attribute {
    string attributeName; % This helps to differentiate the subclasses in constraints
    int value;
}
class Strength extends Attribute.
attributeName(Strength::new): "Strength". % Set to this string for every instance of the class
%Always have on item
scope Strength = 0..1.

class Intelligence extends Attribute.
attributeName(Intelligence::new): "Intelligence". % Set to this string for every instance of the class
scope Intelligence = 0..1.

class Agility extends Attribute.
attributeName(Agility::new): "Agility". % Set to this string for every instance of the class
scope Agility = 0..1.

class Perception extends Attribute.
attributeName(Perception::new): "Perception". % Set to this string for every instance of the class
scope Perception = 0..1.

abstract class Skill{
    string skillName;
    int min_level;
    contains Attribute[1] skillAttribute;
}

class Archery extends Skill.
skillName(Archery::new): "Archery". % Set to this string for every instance of the class
scope Archery = 0..1.

class Magic extends Skill.
skillName(Magic::new): "Magic". % Set to this string for every instance of the class
scope Magic = 0..1.

class Stealth extends Skill.
skillName(Stealth::new): "Stealth". % Set to this string for every instance of the class
scope Stealth = 0..1.

abstract class Equipment{
    string equipmentName;
}

abstract class Weapon extends Equipment{
    int attackDammage;
}

abstract class Armour extends Equipment{
    int defendDammage;
}

abstract class Potion extends Equipment{
    int duration;
}

class Sword extends Weapon{
    string color;
}
type(Sword::new): "Sword".

class Bow extends Weapon{
    int numArrow;
}
type(Bow::new): "Bow".

class Axe extends Weapon.
type(Axe::new): "Axe".

class Staff extends Weapon{
    int magicLevel;
}
type(Staff::new): "Staff".

class HeavyArmour extends Armour.

class LightArmour extends Armour.

class growdPotion extends Potion.

class invisabilityPotion extends Potion.

class shapeShiftPotion extends Potion.

%We only have one Hero so all attributes are hero attributes

% == Constraints ==

%At least one of the arrtibutes must be a value higher than one
int sumOfAllAttributes() = sum {  Attribute(a) -> value(a)}.
error noZeroAttributes() <-> sumOfAllAttributes() > 0.

error EquipmentLimitHero(Hero h) <-> (count {  weapons(h, _e) } + count {  potions(h, _e) } + count {  armours(h, _e) })  < 5. %equipment limit Hero

error ArmorLimitHero(Hero h) <-> count { armours(h, _e) } < 2 . %equipment limit Hero

error EquipmentLimitRace(Race r) <-> (count {  weapons(r, _e) } + count {  potions(r, _e) } + count {  armours(r, _e) })  < 5. %equipment limit Hero

error WizzardOnlyStaff(Hero h1) <-> role(h1, r1), 
                             ((type(r1) != "Wizzard" && count {  Staff(_s) } != 0)).

error RaceNoStaff(Race r1) <->  weapons(r1, w1), count {Staff(w1) } != 0.

error ThiefNoHeavyArmour(Thief t1) <-> armours(t1, a1), 
                             ( count {  HeavyArmour(a1) } != 0).

error WizzardMustSkills(Wizzard w1) <-> ( count {  skills(w1, _1) } > 0).
error WizzardMustHaveMagic(Wizzard w1) <-> skills(w1, s1), ( count {  Magic(s1) } == 0).



% error skillAttributesInHeroAttributes() <-> Skill(s), skillAttribute(s, a0), Hero(h), attributes(h) contains a1. 
